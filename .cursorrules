# Cursor Rules for Industrial Monitor Project

# This project runs on Raspberry Pi and Raspberry Pi Pico

## Programming Language Requirements

- Use MicroPython for Raspberry Pi Pico development
- Use Python 3 for Raspberry Pi development
- Ensure compatibility with MicroPython's limited standard library
- Use machine module for hardware control on Pico
- Use GPIO pins and PWM through machine.Pin and machine.PWM

## Component Testing Methodology

- Each component MUST be tested individually before integration
- Create test files in test_components/ folder for each hardware component
- Test components in isolation first, then integrate to main project
- Future components to test: DS3231 RTC, microSD card reader
- Follow the pattern: test\_[component_name].py in test_components/

## Character Encoding Rules

- NEVER use emojis or special Unicode characters in code
- NEVER use accented characters (√°, √©, √≠, √≥, √∫, √±, √º, etc.)
- Use only ASCII characters for maximum compatibility
- Replace accented characters with their ASCII equivalents:
  - √° ‚Üí a, √© ‚Üí e, √≠ ‚Üí i, √≥ ‚Üí o, √∫ ‚Üí u
  - √± ‚Üí n, √º ‚Üí u
  - Use "conexion" instead of "conexi√≥n"
  - Use "configuracion" instead of "configuraci√≥n"
  - Use "funcion" instead of "funci√≥n"
  - Use "estacion" instead of "estaci√≥n"
  - Use "ultimo" instead of "√∫ltimo"
  - Use "segun" instead of "seg√∫n"

## Display Rules

- Use plain text indicators instead of emojis:
  - Use "[ACTIVO]" instead of "üü¢"
  - Use "[DETENIDO]" instead of "üî¥"
  - Use "ERROR:" instead of "‚ùå"
  - Use "INFO:" instead of "‚ÑπÔ∏è"
  - Use "WARNING:" instead of "‚ö†Ô∏è"
  - Use "SUCCESS:" instead of "‚úÖ"

## Hardware Compatibility

- This code runs on Raspberry Pi and Raspberry Pi Pico
- Terminal environments may not support Unicode properly
- Some embedded systems have limited character set support
- ASCII-only output ensures compatibility across all platforms

## Code Style

- Keep comments and strings in Spanish but without accents
- Use clear, descriptive variable names without special characters
- Prefer English for technical terms (debug, mode, status, etc.)
- Use underscores for multi-word variables (debug_mode, serial_port, etc.)

## Examples of Correct Usage

```python
# Good
print("Conectado a puerto serial")
print("[ACTIVO] Estacion funcionando")
debug_mode = True
ultima_lectura = timestamp

# Bad
print("‚úÖ Conectado a puerto serial")
print("üü¢ Estaci√≥n funcionando")
debug_mode = True
√∫ltima_lectura = timestamp
```

## File Naming

- Use ASCII characters only in filenames
- Use underscores instead of spaces or special characters
- Avoid accented characters in file names
